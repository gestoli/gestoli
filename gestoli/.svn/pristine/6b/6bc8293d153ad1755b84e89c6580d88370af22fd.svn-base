package es.caib.gestoli.front.spring;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.propertyeditors.CustomBooleanEditor;
import org.springframework.beans.propertyeditors.CustomNumberEditor;
import org.springframework.orm.hibernate3.HibernateTemplate;
import org.springframework.validation.BindException;
import org.springframework.validation.Errors;
import org.springframework.web.bind.ServletRequestDataBinder;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.AbstractFormController;
import org.springframework.web.servlet.mvc.BaseCommandController;
import org.springframework.web.servlet.mvc.SimpleFormController;

import es.caib.gestoli.logic.interfaces.OliInfraestructuraEjb;
import es.caib.gestoli.logic.interfaces.OliProcessosEjb;
import es.caib.gestoli.logic.model.Establiment;
import es.caib.gestoli.logic.model.EtiquetesLot;

/**
 * <p>Controlador per a l'acció d'executar un proces d'entrada
 * de oliva.</p>
 * <p>Aquest controlador distingueix entre les peticions del
 * tipus GET y les de tipus POST. Si la petición es de tipus POST
 * s'executa l'acció de creació o d'edició. Si la petició es de
 * tipo GET només mostra la página.
 *
 * @author cperez <cperez@at4.net>
 */
public class EtiquetesLotFormController extends SimpleFormController {

	private static Logger logger = Logger.getLogger(EtiquetesLotFormController.class);
	
	private OliInfraestructuraEjb oliInfraestructuraEjb;
	private OliProcessosEjb oliProcessosEjb;
	private String seleccioSessionKeyOrigen;
	private HibernateTemplate hibernateTemplate;
	
	/**
     * Es crida quan s'accepten les modificacions a l'objecte. Només
     * s'executa aquesta funció en el cas de que s'hagi executat la
     * validació sense produïr cap error.
     * 
     * @see SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.Object, org.springframework.validation.BindException)
     */
    public ModelAndView onSubmit(
            HttpServletRequest request,
            HttpServletResponse response,
            Object command,
            BindException errors)
    throws ServletException {
    	EtiquetesLotCommand etiquetesLotCommand = (EtiquetesLotCommand)command;
    	
    	try {
    		Boolean olivaTaula = Boolean.valueOf(true);
    		String olivaTaulaParam = request
    				.getParameter("olivaTaula");
    		if (olivaTaulaParam == null) {
    			olivaTaula = Boolean.valueOf(false);
    		}
    		
    		EtiquetesLot etiquetesLot = new EtiquetesLot(
    				etiquetesLotCommand.getEtiquetaLletra(),
    				etiquetesLotCommand.getEtiquetaInici(),
    				etiquetesLotCommand.getEtiquetaFi(),
    				etiquetesLotCommand.getCapacitat(),
    				false,
    				false,
    				olivaTaula,
    				oliInfraestructuraEjb.establimentAmbId(etiquetesLotCommand.getIdEstabliment()));
    		
    		oliInfraestructuraEjb.setHibernateTemplate(getHibernateTemplate());
    		oliInfraestructuraEjb.guardarEtiquetesLot(etiquetesLot);
    		
    		ControllerUtils.saveMessageInfo(request, missatge("etiquetesLot.missatge.ok"));
    	} catch (Exception e) {
    		logger.error("Error processant l'etiquetatge", e);
    		ControllerUtils.saveMessageError(request, missatge("etiquetesLot.missatge.no"));
    	}
    	
		String desti = "EtiquetesLot.html?idEstabliment=" + etiquetesLotCommand.getIdEstabliment();
		return new ModelAndView("redirect:" + desti);
    }

    /**
     * Retorna totes les dades del model necessàries per a mostrar
     * el formulari d'inserció (LOVs y coses per l'estil) si no
     * n'hi ha.
     * 
     * @see SimpleFormController#referenceData(javax.servlet.http.HttpServletRequest, java.lang.Object, org.springframework.validation.Errors)
     */
    protected Map referenceData(
            HttpServletRequest request,
            Object command,
            Errors errors)
    throws Exception {
    	EtiquetesLotCommand etiquetesLotCommand = (EtiquetesLotCommand)command;
        Map myModel = new HashMap();
        
        Establiment establiment = oliInfraestructuraEjb.establimentAmbId(Long.parseLong(request.getParameter("idEstabliment")));
        if (establiment != null && establiment.getOlivaTaula()!=null && establiment.getOlivaTaula()==true)
			myModel.put("estOlivaTaula", "true");
        
    	myModel.put("path", "etiquetar");
    	
        return myModel;
    }
    
    /**
     * En el cas de que sigui una edició retorna l'objecte omplit amb
     * les dades actuals del registre. En caso de que sigui una creació
     * retorna l'objecte buit.
     * 
     * @see AbstractFormController#formBackingObject(javax.servlet.http.HttpServletRequest)
     */
    protected Object formBackingObject(HttpServletRequest request) throws ServletException {
    	EtiquetesLotCommand etiquetesLotCommand = new EtiquetesLotCommand();

    	return etiquetesLotCommand;
    }
	
	/**
     * Configuració del <i>binder</i>. Si hi ha camps en el
     * <i>command</i> amb tipus que no siguin <i>String</i>
     * s'ha de configurar el seu corresponent binder aquí.
     * 
     * @see BaseCommandController#initBinder(javax.servlet.http.HttpServletRequest, org.springframework.web.bind.ServletRequestDataBinder)
     */
    protected void initBinder(
            HttpServletRequest request,
            ServletRequestDataBinder binder)
    throws Exception {
    	binder.registerCustomEditor(
    			Integer.class,
        		new CustomNumberEditor(Integer.class, true));
    	binder.registerCustomEditor(
        		Long.class,
        		new CustomNumberEditor(Long.class, true));
    	binder.registerCustomEditor(Boolean.class, new CustomBooleanEditor("S",
				"N", true));
    	binder.registerCustomEditor(
        		Float.class,
        		new CustomNumberEditor(Float.class, true));
    }
	
	/**
	 * @param infraestructuraEjb the infraestructuraEjb to set
	 */
	public void setOliInfraestructuraEjb(OliInfraestructuraEjb oliInfraestructuraEjb) {
		this.oliInfraestructuraEjb = oliInfraestructuraEjb;
	}

    /**
	 * @param oliProcessosEjb the oliProcessosEjb to set
	 */
	public void setOliProcessosEjb(OliProcessosEjb oliProcessosEjb) {
		this.oliProcessosEjb = oliProcessosEjb;
	}

	/**
     * Injecció de la dependència seleccioSessionKeyOrigen
     *
     * @param seleccioSessionKey La classe a injectar.
     */
    public void setSeleccioSessionKeyOrigen(String seleccioSessionKeyOrigen) {
        this.seleccioSessionKeyOrigen = seleccioSessionKeyOrigen;
    }

	private String missatge(String clave){
    	String valor= getMessageSourceAccessor().getMessage(clave);
    	return valor;
    }
    
    /**
	 * set the hibernate template.
	 * @param hibernateTemplate the hibernate spring template.
	 * @spring.property ref="hibernateTemplate"
	 */
	public void setHibernateTemplate(HibernateTemplate hibernateTemplate){
		this.hibernateTemplate = hibernateTemplate;
	}
	
	/**
	 * get the hibernate template.
	 * @return the hibernate spring template.
	 */
	public HibernateTemplate getHibernateTemplate(){
		return this.hibernateTemplate;
	}
}
