package es.caib.gestoli.logic.dao;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.apache.log4j.Logger;
import org.hibernate.FlushMode;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.springframework.orm.hibernate3.HibernateTemplate;

import es.caib.gestoli.logic.exception.InfrastructureException;
import es.caib.gestoli.logic.model.Diposit;
import es.caib.gestoli.logic.model.EntradaDiposit;
import es.caib.gestoli.logic.model.HistoricDiposit;
import es.caib.gestoli.logic.model.SortidaDiposit;
import es.caib.gestoli.logic.model.SortidaLot;
import es.caib.gestoli.logic.util.Constants;


/**
 * Home object for domain model class Establiment
 * @see es.caib.gestoli.logic.model.Establiment
 * 
 */
public class HistoricDipositDao {
	private static Logger logger = Logger.getLogger(HistoricDipositDao.class);
	private HibernateTemplate hibernateTemplate;


	/**
	 * Recupera todos los registros
	 * @return
	 * @throws InfrastructureException
	 */
	public Collection findAll() throws InfrastructureException {
		Collection col;
		try {
			logger.debug("findAll ini");
			col = getHibernateTemplate().find("from HistoricDiposit as dip order by dip.id"); 
		} catch (HibernateException ex) {
			logger.error("findAll failed", ex);
			throw new InfrastructureException(ex);
		}
		logger.debug("findAll fin");
		return col; 
	}


	/**
	 * Devuelve el objeto que tiene el id
	 * @param id
	 * @return
	 * @throws InfrastructureException
	 */
	public Diposit getById(Long id) throws InfrastructureException {

		List diposits;
		try {
			logger.debug("getById ini");
			String q = "from HistoricDiposit as di where di.id = " + id;
			diposits = getHibernateTemplate().find(q);
			if (diposits.size() > 0) {
				logger.debug("getById fin");
				return (Diposit)diposits.get(0);
			}
		} catch (HibernateException ex) {
			logger.error("getById failed", ex);
			throw new InfrastructureException(ex);
		}
		logger.debug("getById fin");
		return null;		
	}


	/**
	 * Retorna un llista de totes les diposits associades amb
	 * un zona determinat.
	 * 
	 * @return
	 * @throws InfrastructureException
	 */
	public List findActiusByZona(Long zonaId) throws InfrastructureException {
		List diposits;
		try {
			logger.debug("findActiusByZona ini");
			String q = "from HistoricDiposit dip " +
			"where dip.zona.id = " + zonaId + " " +
			"and dip.actiu = 'true' " +
			"order by dip.id";
			diposits = getHibernateTemplate().find(q);
		} catch (HibernateException ex) {
			logger.error("findActiusByZona failed", ex);
			throw new InfrastructureException(ex);
		}
		logger.debug("findActiusByZona fin");
		return diposits;
	}

	
	/**
	 * Retorna un llista de totes les diposits associades amb
	 * un zona determinat.
	 * 
	 * @return
	 * @throws InfrastructureException
	 */
	public List findActiusByZonaNoTraslladats(Long zonaId) throws InfrastructureException {
		List diposits;
		try {
			logger.debug("findActiusByZona ini");
			String q = "from HistoricDiposit dip " +
			"where dip.zona.id = " + zonaId + " " +
			"and dip.actiu = 'true' " +
			"and dip not in( select elements(tdi.diposits) from Trasllat tdi where tdi.acceptatTrasllat = true and tdi.retornatEstablimentOrigen = false and tdi.traslladant = false) "+
			"order by dip.id";
			diposits = getHibernateTemplate().find(q);
		} catch (HibernateException ex) {
			logger.error("findActiusByZona failed", ex);
			throw new InfrastructureException(ex);
		}
		logger.debug("findActiusByZona fin");
		return diposits;
	}

	/**
	 * Retorna un llista de totes les diposits associades amb
	 * un zona determinat.
	 * 
	 * @return
	 * @throws InfrastructureException
	 */
	public List findActiusNoFicticioByZona(Long zonaId) throws InfrastructureException {
		List diposits;
		try {
			logger.debug("findActiusNoFicticioByZona ini");
			String q = "from HistoricDiposit dip " +
			"where dip.zona.id = " + zonaId + " " +
			"and dip.actiu = 'true' " +
			"and dip.fictici = 'false' " +
			"order by dip.id";
			diposits = getHibernateTemplate().find(q);
		} catch (HibernateException ex) {
			logger.error("findActiusNoFicticioByZona failed", ex);
			throw new InfrastructureException(ex);
		}
		logger.debug("findActiusNoFicticioByZona fin");
		return diposits;
	}
	
	/**
	 * Retorna un llista de totes les diposits associades amb
	 * un zona determinat.
	 * 
	 * @return
	 * @throws InfrastructureException
	 */
	public List findActiusByEstabliment(Long establimentId) throws InfrastructureException {
		List diposits;
		try {
			logger.debug("findByEstabliment ini");
			String q = "select distinct dip from HistoricDiposit dip " +
			" where ((dip.zonaOrigenTrasllat.id is not null and dip.zonaOrigenTrasllat.id in (select z.id from Zona z where z.establiment.id = " + establimentId + ")) or" +
				  "  (dip.zonaOrigenTrasllat is null and dip.establiment.id = " + establimentId + ")) " +
			" and dip.actiu = 'true' " +
			" order by dip.codiAssignat";
			diposits = getHibernateTemplate().find(q);
			logger.debug("findByEstabliment ini");
		} catch (HibernateException ex) {
			logger.error("findByEstabliment failed", ex);
			throw new InfrastructureException(ex);
		}
		return diposits;
	}
	
	/**
	 * Retorna un llista de totes les diposits associades amb
	 * un establiment.
	 * 
	 * @return
	 * @throws InfrastructureException
	 */
	public List findByEstabliment(Long establimentId) throws InfrastructureException {
		List diposits;
		try {
			logger.debug("findByEstabliment ini");
			String q = "select dip from HistoricDiposit dip " +
			"where dip.zona.actiu = true " +
			"and dip.zona.establiment.id = " + establimentId + " " +
			"order by dip.codiAssignat";
			diposits = getHibernateTemplate().find(q);
			logger.debug("findByEstabliment ini");
		} catch (HibernateException ex) {
			logger.error("findByEstabliment failed", ex);
			throw new InfrastructureException(ex);
		}
		return diposits;
	}
	
	
	public Diposit findDipositFicticiByEstabliment(Long establimentId) throws InfrastructureException {
		String q = "select dip from HistoricDiposit dip " +
		"where " +
		" dip.establiment.id = " + establimentId + 
		" and dip.fictici = true " +
		" order by dip.codiAssignat";
		List diposits = getHibernateTemplate().find(q);
		
		for(int i=0; i<diposits.size(); i++){
			Diposit d = (Diposit)diposits.get(i);
			if(d.getFictici()) return d;
		}
		
		return null;
	}
	
	/**
	 * Retorna un llista de tots els diposits no ficticis associats amb
	 * un establiment.
	 * 
	 * @return
	 * @throws InfrastructureException
	 */
	public List findNoFicticiByEstabliment(Long establimentId) throws InfrastructureException {
		List diposits;
		try {
			logger.debug("findNoFicticiByEstabliment ini");
			String q = "select dip from HistoricDiposit dip " +
			"where dip.zona.actiu = true " +
			"and dip.fictici = false " +
			"and dip.zona.establiment.id = " + establimentId + " " +
			"order by dip.codiAssignat";
			diposits = getHibernateTemplate().find(q);
			logger.debug("findNoFicticiByEstabliment ini");
		} catch (HibernateException ex) {
			logger.error("findNoFicticiByEstabliment failed", ex);
			throw new InfrastructureException(ex);
		}
		return diposits;
	}
	

	/**
	 * Retorna un llista de tots els diposits associats amb les zones
	 * 
	 * @return
	 * @throws InfrastructureException
	 */
	public List findByZona(Long zonaId) throws InfrastructureException {
		List establiments;
		try {
			logger.debug("findByZona ini");
			String q = "select dip from HistoricDiposit dip " +
			"where dip.zona.id = " +zonaId+ " " +
			"order by dip.id";
			establiments = getHibernateTemplate().find(q);
		} catch (HibernateException ex) {
			logger.error("findByZona failed", ex);
			throw new InfrastructureException(ex);
		}
		logger.debug("findByZona fin");
		return establiments;
	}

	/**
	 * Retorna un llista de tots els diposits buits
	 * 
	 * @return
	 * @throws InfrastructureException
	 */
	public List findVaciosByEstabliment(Long establimentId) throws InfrastructureException {
		List diposits;
		try {
			logger.debug("findVaciosByEstabliment ini");
			String q = "from HistoricDiposit dip " +
			"where dip.establiment.id = " +establimentId+ " " +
			"and dip.actiu=true "+
			"and dip.fictici=false "+
			"and (dip.volumActual is null or dip.volumActual = 0) "+
			"order by dip.id";
			
			diposits = getHibernateTemplate().find(q);
		} catch (HibernateException ex) {
			logger.error("findVaciosByEstabliment failed", ex);
			throw new InfrastructureException(ex);
		}
		logger.debug("findVaciosByEstabliment fin");
		return diposits;
	}

	/**
	 * Retorna un llista de tots els diposits associats amb les zones
	 * 
	 * @return
	 * @throws InfrastructureException
	 */
	public List findNoVaciosByZonaAndCategorias(Long zonaId, Object[] categorias) throws InfrastructureException {
		List diposits;
		try {
			logger.debug("findNoVaciosByZonaAndCategorias ini");
			String q = "select dip from HistoricDiposit dip " +
			"where dip.zona.id = " +zonaId+ " " +
			"and dip.actiu=true "+
			"and dip.fictici = 'false' " +
			"and dip.volumActual > 0 "+
			"and dip.partidaOli.categoriaOli.id in(:categorias) "+
			"order by dip.id";
			diposits = getHibernateTemplate().findByNamedParam(q, "categorias", categorias);
		} catch (HibernateException ex) {
			logger.error("findNoVaciosByZonaAndCategorias failed", ex);
			throw new InfrastructureException(ex);
		}
		logger.debug("findNoVaciosByZonaAndCategorias fin");
		return diposits;
	}
	
	/**
	 * Retorna un llista de tots els diposits associats amb les zones
	 * 
	 * @return
	 * @throws InfrastructureException
	 */
	public List findNoVaciosNiTraslladatsByZonaAndCategorias(Long zonaId, Object[] categorias) throws InfrastructureException {
		List diposits;
		try {
			logger.debug("findNoVaciosNiTraslladatsByZonaAndCategorias ini");
			String q = "select dip from HistoricDiposit dip " +
			"where dip.zona.id = " +zonaId+ " " +
			"and dip.actiu=true "+
			"and dip.fictici = 'false' " +
			"and dip.volumActual > 0 "+
			"and (dip.zonaOrigenTrasllat is null or dip.zona.establiment = dip.zonaOrigenTrasllat.establiment) "+
			"and dip.partidaOli.categoriaOli.id in(:categorias) "+
			"order by dip.id";
			diposits = getHibernateTemplate().findByNamedParam(q, "categorias", categorias);
		} catch (HibernateException ex) {
			logger.error("findNoVaciosNiTraslladatsByZonaAndCategorias failed", ex);
			throw new InfrastructureException(ex);
		}
		logger.debug("findNoVaciosNiTraslladatsByZonaAndCategorias fin");
		return diposits;
	}
	

	/**
	 * Retorna un llista de tots els diposits associats aa un establecimiento de unas categorias determinadas
	 * 
	 * @return
	 * @throws InfrastructureException
	 */
	public List findNoVaciosByEstablecimientoAndCategorias(Long establimentId, Object[] categorias) throws InfrastructureException {
		List diposits;
		try {
			logger.debug("findNoVaciosByEstablecimientoAndCategorias ini");
			String q = "select dip from HistoricDiposit dip " +
			"where dip.actiu=true "+
			"and dip.fictici = 'false' " +
			"and dip.volumActual > 0";
			if(establimentId!= null){
				q = q+" and dip.establiment.id = " +establimentId ;
			} else {
				q += " and dip.establiment.campanya.id = (select max(cam.id) from Campanya cam) ";
			}
			if(categorias!= null && categorias.length >0){
				q = q+" and dip.partidaOli.categoriaOli.id in(:categorias) ";
			}
			q = q +	" order by dip.id";						
			if(categorias!= null && categorias.length >0){
				diposits = getHibernateTemplate().findByNamedParam(q, "categorias", categorias);
			} else {
				diposits = getHibernateTemplate().find(q);
			}
		} catch (HibernateException ex) {
			logger.error("findNoVaciosByEstablecimientoAndCategorias failed", ex);
			throw new InfrastructureException(ex);
		}
		logger.debug("findNoVaciosByEstablecimientoAndCategorias fin");
		return diposits;
	}

	/**
	 * Retorna un llista de tots els diposits associats aa una zona de unas categorias determinadas y no pendientes de traslado
	 * 
	 * @return
	 * @throws InfrastructureException
	 */
	public List findNoVaciosByZonaAndCategoriasNoPendnientesDeTraslado(Long zonaId, Object[] categorias) throws InfrastructureException {
		List diposits;
		try {
			logger.debug("findNoVaciosByZonaAndCategoriasNoPendnientesDeTraslado ini");
			String q = "select dip from HistoricDiposit dip " +
			"where dip.zona.id = " +zonaId+ " " +
			"and dip.actiu=true "+
			"and dip.fictici = 'false' " +
			"and dip.volumActual > 0 "+
			"and dip not in( select elements(tdi.diposits) from Trasllat tdi where (tdi.acceptatTrasllat = true or tdi.acceptatTrasllat is null) and tdi.data > now() ) ";
					
			if(categorias!= null && categorias.length >0){
				q = q+" and dip.partidaOli.categoriaOli.id in(:categorias) ";
			}
			q = q +	" order by dip.id";						
			if(categorias!= null && categorias.length >0){
				diposits = getHibernateTemplate().findByNamedParam(q, "categorias", categorias);
			} else {
				diposits = getHibernateTemplate().find(q);
			}
		} catch (HibernateException ex) {
			logger.error("findNoVaciosByZonaAndCategoriasNoPendnientesDeTraslado failed", ex);
			throw new InfrastructureException(ex);
		}
		logger.debug("findNoVaciosByZonaAndCategoriasNoPendnientesDeTraslado fin");
		return diposits;
	}

	/**
	 * Retorna un llista de tots els diposits vacios o no llenos de unas determinadas categorias associats amb les zones
	 * 
	 * @return
	 * @throws InfrastructureException
	 */
	public List findNoLlenosByZonaAndCategorias(Long zonaId,Object[] categorias) throws InfrastructureException {
		List diposits;
		try {
			logger.debug("findNoLlenosByZonaAndCategorias ini");
			String q = "select dip " +
			"from HistoricDiposit dip " +
			"left join dip.partidaOli par " +
			"where dip.zona.id = " +zonaId+ " " +
			"and dip.actiu=true "+
			"and dip.fictici = 'false' " +
			"and ( (dip.volumActual is null) " +
			"	or (dip.volumActual = 0) " +
			"	or ((dip.capacitat-dip.volumActual>0) " +
			"		and (par.categoriaOli.id in (:categorias) ) )" +
			" ) "+
			"order by dip.id";			
			diposits = getHibernateTemplate().findByNamedParam(q, "categorias", categorias);
		} catch (HibernateException ex) {
			logger.error("findNoLlenosByZonaAndCategorias failed", ex);
			throw new InfrastructureException(ex);
		}
		logger.debug("findNoLlenosByZonaAndCategorias fin");
		return diposits;
	}


	/**
	 * Retorna true si existen depÃƒÂ³sitos activos en una zona
	 * un zona determinat.
	 * 
	 * @return
	 * @throws InfrastructureException
	 */
	public Boolean existenDipositsActiusEnZona(Long zonaId) throws InfrastructureException {
		List diposits;
		try {
			logger.debug("existenDipositsActiusEnZona ini");
			String q = "select count (dip.id) from HistoricDiposit dip " +
			"where dip.zona.id = " + zonaId + " " +
			"and dip.actiu = 'true' ";
			diposits = getHibernateTemplate().find(q);
		} catch (HibernateException ex) {
			logger.error("existenDipositsActiusEnZona failed", ex);
			throw new InfrastructureException(ex);
		}
		if (diposits!= null && diposits.size()> 0 && ((Long)diposits.get(0)).intValue() > 0) {
			logger.debug("existenDipositsActiusEnZona fin");
			return new Boolean(true);
		}
		logger.debug("existenDipositsActiusEnZona fin");
		return new Boolean(false);
	}


	/**
	 * Retorna true si existen depÃƒÂ³sitos asociados a zonas
	 * 
	 * 
	 * @return
	 * @throws InfrastructureException
	 */
	public boolean existenDepositosAsociadosZonas(Long idZona) throws InfrastructureException {
		List diposits;
		try {
			logger.debug("existenDepositosAsociadosZonas ini");
			String q = "select count(dip.id) from HistoricDiposit dip " +
			"where dip.zona.id = " + idZona + " ";
			diposits = getHibernateTemplate().find(q);
		} catch (HibernateException ex) {
			logger.error("existenDepositosAsociadosZonas failed", ex);
			throw new InfrastructureException(ex);
		}
		if (diposits != null && diposits.size()> 0 && ((Long)diposits.get(0)).intValue() > 0) {
			logger.debug("existenDepositosAsociadosZonas fin");
			return true;
		}
		logger.debug("existenDepositosAsociadosZonas fin");
		return false;
	}

	/**
	 * Actualiza un registro
	 * @param Diposit
	 * @throws InfrastructureException
	 */
	public void makePersistent(HistoricDiposit diposit) throws InfrastructureException {
		try {
			logger.debug("makePersistent ini");
			getHibernateTemplate().setFlushMode(HibernateTemplate.FLUSH_ALWAYS);
			getHibernateTemplate().saveOrUpdate(diposit);
			// Informamos el idOriginal
			if (diposit.getIdOriginal() == null) {
				diposit.setIdOriginal(diposit.getId());
			}
			getHibernateTemplate().flush();
			logger.debug("makePersistent fin");
		} catch (HibernateException ex) {
			logger.error("makePersistent failed", ex);
			throw new InfrastructureException(ex);
		}
	}


	/**
	 * Actualiza un registro
	 * @param Diposit
	 * @param session
	 * @throws InfrastructureException
	 */
	public void makePersistent(HistoricDiposit diposit, Session session) throws InfrastructureException {
		try {
			session.setFlushMode(FlushMode.ALWAYS);
			logger.debug("makePersistent ini");
			session.saveOrUpdate(diposit);
			session.flush();
			logger.debug("makePersistent fin");
		} catch (HibernateException ex) {
			logger.error("makePersistent failed", ex);
			throw new InfrastructureException(ex);
		}
	}


	/**
	 * Borra un registro
	 * @param Diposit
	 * @throws InfrastructureException
	 */
	public void makeTransient(HistoricDiposit diposit)
	throws InfrastructureException {
		try {
			logger.debug("makeTransient ini");
			getHibernateTemplate().setFlushMode(HibernateTemplate.FLUSH_ALWAYS);
			getHibernateTemplate().delete(diposit);
			getHibernateTemplate().flush();
			logger.debug("makeTransient fin");
		} catch (HibernateException ex) {
			logger.error("makeTransient failed", ex);
			throw new InfrastructureException(ex);
		}
	}


	/*
	 * Retorna un llista de tots els diposits d'un establiment
	 * que tenen un id que estÃƒÂ  a dins la llista que se passa com a
	 * parÃƒÂ metre i que siguin de tipus <i>partida de aceite</i>.
	 * 
	 * @param seleccio
	 * @return
	 * @throws InfrastructureException
	 */
	public Collection findInfo(Long establimentId, Long zonaId, Object[] seleccio, boolean senseZona) throws InfrastructureException {
		Collection c = null;

		try {
			logger.debug("findInfo ini");
			String query ="from HistoricDiposit as dip" +					
			" where " +
			" dip.actiu = true " +
			((establimentId != null) ? "and dip.establiment.id = :establimentId " : "") +
			((seleccio != null) ? "and dip.id in (:seleccio) " : "") +
			((zonaId != null) ? "and dip.zona.id = :zonaId " : "") +
			((senseZona) ? "and dip.zona.id is null " : "");

			int numParams = 0;
			if (seleccio != null) numParams++;
			if (zonaId != null) numParams++;
			if (establimentId != null) numParams++;
			String[] paramNames = new String[numParams];
			Object[] values = new Object[numParams];

			int numParam = -1;
			if (seleccio != null) {
				numParam++;
				paramNames[numParam] = "seleccio";
				values[numParam] = seleccio;
			}
			if (zonaId != null) {
				numParam++;
				paramNames[numParam] = "zonaId";
				values[numParam] = zonaId;
			}
			if (establimentId != null) {
				numParam++;
				paramNames[numParam] = "establimentId";
				values[numParam] = establimentId;
			}
			c = getHibernateTemplate().findByNamedParam(query, paramNames, values);

			// Ordena els resltats segons l'ordre de la seleccio
			if (seleccio != null) {
				ArrayList infoOrdenat = new ArrayList();
				for (int nsel = 0; nsel < seleccio.length; nsel++) {
					Long cid = (Long)seleccio[nsel];
					for (Iterator it = c.iterator(); it.hasNext();) {
						Diposit info = (Diposit)it.next();
						if (((Long)info.getId()).longValue() == cid.longValue()) {
							infoOrdenat.add(info);
							break;
						}
					}
				}
				c = infoOrdenat;
			}
		} catch (HibernateException ex) {
			logger.error("findInfo failed", ex);
			throw new InfrastructureException(ex);
		}

		logger.debug("findInfo fin");
		return c;
	}


	/**
	 * 
	 * @param seleccio
	 * @return
	 * @throws InfrastructureException
	 */
	public Collection findInfo( Object[] seleccio) throws InfrastructureException {
		Collection c = null;

		try {
			logger.debug("findInfo ini");
			if (seleccio != null) {
				String query ="from HistoricDiposit as dip" +					
				" where " +
				"dip.actiu = true " +
				"and dip.id in (:seleccio) " ;						

				c = getHibernateTemplate().findByNamedParam(query, "seleccio", seleccio);

				// Ordena els resltats segons l'ordre de la selecciÃƒÂ³

				ArrayList infoOrdenat = new ArrayList();
				for (int nsel = 0; nsel < seleccio.length; nsel++) {
					Long cid = (Long)seleccio[nsel];
					for (Iterator it = c.iterator(); it.hasNext();) {
						Diposit info = (Diposit)it.next();
						if (((Long)info.getId()).longValue() == cid.longValue()) {
							infoOrdenat.add(info);
							break;
						}
					}
				}
				c = infoOrdenat;
			}
		} catch (HibernateException ex) {
			logger.error("findInfo failed", ex);
			throw new InfrastructureException(ex);
		}

		logger.debug("findInfo fin");
		return c;
	}

	/**
	 * Informació referent a l'entrada d'oliva al dipòsit.
	 * 
	 * @param dipositId
	 * @return
	 */
	public Object[] getInfoOliva(Long dipositId) {
		String q =	"select el.responsable, el.data " +
					"from HistoricDiposit d, " +
					"	EntradaDiposit e, " +
					"	Elaboracio el " +
					"where d.id = " + dipositId + " " +
					"and e.diposit.id = d.id " +
					"and el.id = e.elaboracio.id";
		List info = getHibernateTemplate().find(q);
		Object[] obj = new Object[2];
		if (info.size() > 0) {
			Object[] objInfo = (Object[])(info.get(0));
			obj[0] = objInfo[0];
			obj[1] = objInfo[1];
		}
		return obj;
	}

	/**
	 * Comprova si la partida d'oli tÃƒÂ© dipÃƒÂ²sits associats
	 * @param lid
	 * @return
	 */
	public Boolean existeixenDipositsAssociatsPartidesOli(Long idPartidaOli ) {
		List diposits;
		try {
			logger.debug("existeixenDipositsAssociatsPartidesOli ini");
			String q = "select count(dip.id) from HistoricDiposit dip " +
			"where dip.partidaOli.id = " + idPartidaOli + " ";
			diposits = getHibernateTemplate().find(q);
		} catch (HibernateException ex) {
			logger.error("existeixenDipositsAssociatsPartidesOli failed", ex);
			throw new InfrastructureException(ex);
		}
		if (diposits != null && diposits.size()> 0 && ((Long)diposits.get(0)).intValue() > 0) {
			logger.debug("existeixenDipositsAssociatsPartidesOli fin");
			return true;
		}
		logger.debug("existeixenDipositsAssociatsPartidesOli fin");
		return false;
	}
	
	/**
	 * set the hibernate template.
	 * @param hibernateTemplate the hibernate spring template.
	 * @spring.property ref="hibernateTemplate"
	 *
	 */
	public void setHibernateTemplate(HibernateTemplate hibernateTemplate){
		this.hibernateTemplate = hibernateTemplate;
	}


	/**
	 * get the hibernate template.
	 * @return the hibernate spring template.
	 */
	public HibernateTemplate getHibernateTemplate(){
		return this.hibernateTemplate;
	}
}
