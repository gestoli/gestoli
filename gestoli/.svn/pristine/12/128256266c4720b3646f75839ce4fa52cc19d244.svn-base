package es.caib.gestoli.front.spring;

import java.rmi.RemoteException;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.propertyeditors.CustomBooleanEditor;
import org.springframework.beans.propertyeditors.CustomNumberEditor;
import org.springframework.orm.hibernate3.HibernateTemplate;
import org.springframework.validation.BindException;
import org.springframework.validation.Errors;
import org.springframework.web.bind.ServletRequestDataBinder;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.AbstractFormController;
import org.springframework.web.servlet.mvc.BaseCommandController;
import org.springframework.web.servlet.mvc.SimpleFormController;

import es.caib.gestoli.front.util.Util;
import es.caib.gestoli.logic.interfaces.OliArxiuEjb;
import es.caib.gestoli.logic.interfaces.OliInfraestructuraEjb;
import es.caib.gestoli.logic.model.Campanya;
import es.caib.gestoli.logic.model.DescomposicioPlantacio;
import es.caib.gestoli.logic.model.DocumentInspeccio;
import es.caib.gestoli.logic.model.Finca;
import es.caib.gestoli.logic.model.Grup;
import es.caib.gestoli.logic.model.Municipi;
import es.caib.gestoli.logic.model.Olivicultor;
import es.caib.gestoli.logic.model.Plantacio;
import es.caib.gestoli.logic.model.Usuari;
import es.caib.gestoli.logic.model.VarietatOliva;
import es.caib.gestoli.logic.util.Constants;


/**
 * <p>Controlador para las acciones de dar de alta o editar un
 * registro de olivicultor.</p>
 * <p>Los parámetros de la petición HTTP relevantes para este
 * controlador son:
 * <ul>
 *   <li><code>id</code>
 *    - Identificador del registro. Este parámetro es el que
 *      determina si se ha de mostrar la página de creación o la
 *      página de edición.</li>
 * </ul></p>
 * <p>No hay información para la vista:
 * <p>Este controlador distingue entre las peticiones del tipo
 * GET y las de tipo POST. Si la petición es de tipo POST
 * se ejecuta la acción de creación o de edición. Si la petición es de
 * tipo GET solo se muestra la página.
 *
 *
 */
public class OlivicultorFormController extends SimpleFormController {
	private static Logger logger = Logger.getLogger(OlivicultorFormController.class);
	private OliInfraestructuraEjb oliInfraestructuraEjb;
	private OliArxiuEjb oliArxiuEjb;
	private String campanyaSessionKey;
	private String rolOlivicultor;
	private String rolDoGestor;
	private HibernateTemplate hibernateTemplate;

	/**
	 * Se llama cuando se aceptan las modificaciones del objeto. Solo
	 * se ejecuta esta función en el caso de que se haya ejecutado la
	 * validación sin producir ningún error.
	 * @see SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.Object, org.springframework.validation.BindException)
	 */
	public ModelAndView onSubmit(
			HttpServletRequest request,
			HttpServletResponse response,
			Object command,
			BindException errors)
	throws ServletException {
		
		OlivicultorCommand olivicultor = (OlivicultorCommand)command;

		//=================== USUARI ===============================
		if (olivicultor.getContrasenya() != null && olivicultor.getContrasenyaEncriptada() != null) {
			if (olivicultor.getContrasenya().equals(olivicultor.getContrasenyaEncriptada())) {
				olivicultor.setContrasenya(null);
			}
		}
		if (olivicultor.getContrasenya() != null) {
			olivicultor.setContrasenya(Util.parseContrasenya(olivicultor.getContrasenya()));
		}
		String contrasenya = olivicultor.getContrasenya();
		
		String[] grups = {rolOlivicultor};
		String usuari = olivicultor.getNomUsuari();
		
		Boolean activo = Boolean.valueOf(true);
		if(olivicultor.getActiu()== null){
			activo = Boolean.valueOf(false);
		}
		
		String idioma = olivicultor.getIdiomaId();
		//===========================================================
		
		Long usuariId = olivicultor.getUsuariId();
		Boolean teCodiDO = olivicultor.getTeCodiDo() == null ? false : olivicultor.getTeCodiDo();
		Boolean teCodiDOExperimental = olivicultor.getTeCodiDoExperimental() == null ? false : olivicultor.getTeCodiDoExperimental();
		Boolean teCodiDOPOliva = olivicultor.getTeCodiDopOliva() == null ? false : olivicultor.getTeCodiDopOliva();
		// 20090908 obarnes: para las ordenaciones de las tablas, nos interesa que no sea NULL
		// if (codiDOExperimental != null && codiDOExperimental.equals("")) codiDOExperimental = null;		
		String nombre = olivicultor.getNom();
		String telefono = olivicultor.getTelefon();
		if (telefono != null && telefono.equals("")) telefono = null;		
		String email = olivicultor.getEmail();
		if (email != null && email.equals("")) email = null;		
		String fax = olivicultor.getFax();
		if (fax != null && fax.equals("")) fax = null;		
		String direccion = olivicultor.getDireccio();
		Long poblacion = olivicultor.getMunicipiId();
		String cp = olivicultor.getCodiPostal();
		String cuenta = olivicultor.getCompteBancari();
		String nif = olivicultor.getNif();
		Boolean altaDO = Boolean.valueOf(false);
		if (olivicultor.getAltaDO() != null) altaDO = olivicultor.getAltaDO();
		Boolean cartilla = Boolean.valueOf(false);
		if (olivicultor.getCartilla() != null) cartilla = olivicultor.getCartilla();
		Long idOriginal = olivicultor.getIdOriginal() ;
		String uidRfid = olivicultor.getUidRfid();
		if (uidRfid != null && uidRfid.equals("")) uidRfid = null;		
		String observaciones = olivicultor.getObservacions();
		if (observaciones != null && observaciones.equals("")) observaciones = null;
		
		Long olivicultorId = null;
		if (olivicultor.getId()!= null) olivicultorId = olivicultor.getId();
		
		Campanya campanya = new Campanya();		
		if(olivicultor.getCampanyaId()!= null){
			campanya.setId(olivicultor.getCampanyaId());
		}else{
			Long campanyaId = (Long)request.getSession().getAttribute(campanyaSessionKey);
			campanya.setId(campanyaId);
		}
		Boolean subvencionat = Boolean.valueOf(false);
		if (olivicultor.getSubvencionat() != null) subvencionat = olivicultor.getSubvencionat();

		
		Map myModel = new HashMap();
		
		if (isCreate(request)) {
			try {
				//=================== USUARI ===============================
				logger.info("Creant el registre: " + usuari);
				oliInfraestructuraEjb.setHibernateTemplate(getHibernateTemplate());
				usuariId = oliInfraestructuraEjb.usuariCrear(activo, grups, idioma, usuari, contrasenya, email, observaciones);
				olivicultor.setUsuariId(usuariId);
				//===========================================================
				logger.info("Creant el registre: " + olivicultor);
				oliInfraestructuraEjb.setHibernateTemplate(getHibernateTemplate());
				olivicultorId = oliInfraestructuraEjb.olivicultorCrear(usuariId, campanya, null, teCodiDO, teCodiDOExperimental, teCodiDOPOliva, nombre, telefono, email, fax, direccion, poblacion, cp, cuenta, altaDO, cartilla, nif, observaciones, uidRfid, subvencionat);
				olivicultor.setId(olivicultorId);
				ControllerUtils.saveMessageInfo(request, missatge("olivicultor.missatge.crear.ok"));
			} catch (Exception ex) {
				logger.error("Error creant el olivicultor", ex);
				ControllerUtils.saveMessageError(request, missatge("olivicultor.missatge.crear.no"));
			}
		} else {
			try {
				Boolean noRT = oliInfraestructuraEjb.olivicultorAmbId(olivicultor.getId()).getCodiDOPOliva()==null;
				//=================== USUARI ===============================
				logger.info("Modificant el registre: " + usuari);
				oliInfraestructuraEjb.setHibernateTemplate(getHibernateTemplate());
				oliInfraestructuraEjb.usuariModificar(activo, null, idioma, usuari, contrasenya, email, observaciones, usuariId);
				//===========================================================
				logger.info("Modificant el registre: " + olivicultor);
				oliInfraestructuraEjb.setHibernateTemplate(getHibernateTemplate());
				if (!request.isUserInRole(rolOlivicultor)){
					oliInfraestructuraEjb.olivicultorModificar(usuariId, campanya, idOriginal, teCodiDO, teCodiDOExperimental, teCodiDOPOliva, nombre, telefono, email, fax, direccion, 
							poblacion, cp, cuenta, altaDO, cartilla, nif, observaciones, olivicultorId, uidRfid, subvencionat);
				} else {
					oliInfraestructuraEjb.olivicultorModificar(usuariId, campanya, idOriginal, null, null, null, null, telefono, email, fax, direccion, 
							poblacion, cp, cuenta, altaDO, cartilla, null, observaciones, olivicultorId, uidRfid, subvencionat);
				}
				oliInfraestructuraEjb.olivicultorAmbId(olivicultor.getId());
				
				//Si se li está assignant codi RT es crearà una descomposicio de plantacio paralela 
				//a cada una que sigui de oliva mallorquina
				if (noRT && teCodiDOPOliva!=null) {
					Collection<Plantacio> plantacions = oliInfraestructuraEjb.plantacioActivasConDescomposicionesByIdOlivicultor(olivicultorId);
					for (Plantacio plantacio: plantacions) {
						List<DescomposicioPlantacio> plantacionsModificar = new ArrayList();
						for (Object dp: plantacio.getDescomposicioPlantacios()) {
							DescomposicioPlantacio descomposicioPlantacio = (DescomposicioPlantacio) dp;
							if (descomposicioPlantacio.getVarietatOliva().getId() == Constants.VARIETAT_OLIVA_MALLORQUINA) {
								oliInfraestructuraEjb.setHibernateTemplate(getHibernateTemplate());
								VarietatOliva voMall = oliInfraestructuraEjb.variedadAmbId(Constants.VARIETAT_OLIVA_MALLORQUINA);
								VarietatOliva voTaula = oliInfraestructuraEjb.variedadAmbId(Constants.VARIETAT_OLIVA_MALLORQUINA_TAULA);
								String trMall = oliInfraestructuraEjb.obtenirTipusRendimentCampanyaVarietat(oliInfraestructuraEjb.campanyaCercaActual(), voMall.getId());
								Double rvMall = oliInfraestructuraEjb.obtenirRendimentCampanyaVarietat(oliInfraestructuraEjb.campanyaCercaActual(), voMall.getId());
								String trTaula = oliInfraestructuraEjb.obtenirTipusRendimentCampanyaVarietat(oliInfraestructuraEjb.campanyaCercaActual(), voTaula.getId());
								Double rvTaula = oliInfraestructuraEjb.obtenirRendimentCampanyaVarietat(oliInfraestructuraEjb.campanyaCercaActual(), voTaula.getId());
								DescomposicioPlantacio dpot = null;
								boolean trobada = false;
								for (Object dp2: plantacio.getDescomposicioPlantacios()) {
									DescomposicioPlantacio descomposicioPlantacio2 = (DescomposicioPlantacio) dp2;
									if (descomposicioPlantacio2.getVarietatOliva().getId() == Constants.VARIETAT_OLIVA_MALLORQUINA_TAULA) {
										dpot = descomposicioPlantacio2;
										trobada = true;
										break;
									}
								}
								if (!trobada) {
									dpot = new DescomposicioPlantacio();
									dpot.setVarietatOliva(voTaula);
								}
								dpot.setNumeroOliveres(descomposicioPlantacio.getNumeroOliveres());
								dpot.setSuperficie(descomposicioPlantacio.getSuperficie());
								if (trTaula.equals("hectarea")) dpot.setMaxProduccio(rvTaula * dpot.getSuperficie());
								else dpot.setMaxProduccio(rvTaula * dpot.getNumeroOliveres());
								Double produccioRestant = descomposicioPlantacio.getProduccioRestant()/rvMall*rvTaula;
								dpot.setProduccioRestant(produccioRestant);
								dpot.setPlantacio(plantacio);
								plantacionsModificar.add(dpot);
							}
						}
						oliInfraestructuraEjb.setHibernateTemplate(getHibernateTemplate());
						oliInfraestructuraEjb.plantacioModificar(plantacio, plantacionsModificar);
					}
				}

				ControllerUtils.saveMessageInfo(request, missatge("olivicultor.missatge.modificar.ok"));
			} catch (Exception ex) {
				logger.error("Error modificant el establiment ", ex);
				ControllerUtils.saveMessageError(request, missatge("olivicultor.missatge.modificar.no"));
			}
		}
		String forward = getSuccessView()+ "?id=" + olivicultor.getId();
		return new ModelAndView(forward, myModel);
	}


	/**
	 * Retorna todos los datos del modelo necesarios para mostrar
	 * el formulario de inserción (LOVs y cosas de esas) si no hay.
	 * @see SimpleFormController#referenceData(javax.servlet.http.HttpServletRequest, java.lang.Object, org.springframework.validation.Errors)
	 */
	protected Map referenceData(
			HttpServletRequest request,
			Object command,
			Errors errors) throws Exception {
		Map myModel = new HashMap();
		
		if (request.getAttribute("idAlEntrar")==null){
			if (request.getParameter("id")!=null){
				request.setAttribute("idAlEntrar",Boolean.valueOf(true));
			}else{
				request.setAttribute("idAlEntrar",Boolean.valueOf(false));
			}
		}
		
		oliInfraestructuraEjb.setHibernateTemplate(getHibernateTemplate());
		myModel.put("idiomas", oliInfraestructuraEjb.idiomaCercaTots());
		
		if (request.getParameter("uidapp")==null){
		
			if (request.getParameter("cleanuid")!=null && request.getParameter("id")!=null){
				oliInfraestructuraEjb.setHibernateTemplate(getHibernateTemplate());
				oliInfraestructuraEjb.olivicultorGrabaUidTarjeta("", new Long(request.getParameter("id")));
				OlivicultorCommand oliCom = (OlivicultorCommand)command;
				oliCom.setUidRfid("");
			}
			
			oliInfraestructuraEjb.setHibernateTemplate(getHibernateTemplate());
			Collection usuarios =  oliInfraestructuraEjb.usuariCercaTotsActivos();
			Collection usuariosOli = new ArrayList();
			// Validamos que el tipo es olivicultor
			Iterator iteUsuarios = usuarios.iterator();
			while (iteUsuarios.hasNext()){
				
				Usuari usu = (Usuari)iteUsuarios.next();
				
				Iterator iteGrupos = usu.getGrups().iterator();
				while (iteGrupos.hasNext()){
					Grup g = (Grup)iteGrupos.next();
					if (g.getId().equals(rolOlivicultor)){
						usuariosOli.add(usu);
						break;
					}
				}
				
			}
			
			myModel.put("usuarios",usuariosOli);
			if(usuariosOli == null || usuariosOli.size()==0 ){
				ControllerUtils.saveMessageError(request, missatge("olivicultor.missatge.crear.noUsuari"));
				myModel.put("precondicion",Boolean.valueOf(false));
			}	
			
			Long campanyaId = (Long)request.getSession().getAttribute(campanyaSessionKey);
			myModel.put("campanyaId", campanyaId);
			
			if (((Boolean)request.getAttribute("idAlEntrar")).booleanValue()){
				myModel.put("path", "modificar_olivicultor");
			}else{
				myModel.put("path", "crear_olivicultor");
			}	
		
		}else{
			
			myModel.put("path", "modificar_olivicultor");
			myModel.put("uidapp", "1");
			myModel.put("idoliv", request.getParameter("id"));
			String navegador=request.getHeader("User-Agent");
			if (navegador.indexOf("MSIE")!=-1){
				myModel.put("MSIE", new Boolean(true));
			}	
			
		}
		myModel.put("municipis", (List<Municipi>)oliInfraestructuraEjb.obtenirMunicipis());
		
		
		OlivicultorCommand oli = (OlivicultorCommand)command;
		// DOCUMENTOS ASIGNADOS
        if (oli.getId() != null && request.isUserInRole(rolDoGestor)) {
        	List llistatDocuments = new ArrayList();
        	oliInfraestructuraEjb.setHibernateTemplate(getHibernateTemplate());
        	Iterator itDocumentos = oliInfraestructuraEjb.documentsInspeccioByOlivicultor(oli.getId()).iterator();
        	while (itDocumentos.hasNext()) {
        		DocumentInspeccioCommand document = new DocumentInspeccioCommand();
        		document.fromDocumentInspeccio((DocumentInspeccio) itDocumentos.next());
        		oliArxiuEjb.setHibernateTemplate(getHibernateTemplate());
				document.setArxiuObject(oliArxiuEjb.arxiuCercaId(document.getArxiu()));
				llistatDocuments.add(document);
        	}
        	myModel.put("llistatDocuments", llistatDocuments);
        }
		
		return myModel;
	}


	/**
	 * En caso de que sea una edición retorna el objeto rellenado con
	 * los datos actuales del registro. En caso de que sea una creación
	 * retorna el objeto vacío.
	 * @see AbstractFormController#formBackingObject(javax.servlet.http.HttpServletRequest)
	 */
	protected Object formBackingObject(HttpServletRequest request) throws ServletException {
		Long campanyaId = (Long)request.getSession().getAttribute(campanyaSessionKey);
		
		OlivicultorCommand olivicultor = null;
		
		if ((!isFormSubmission(request)) && (!isCreate(request))) {

			try {
				Long olivicultorId = Long.valueOf(request.getParameter("id"));
				oliInfraestructuraEjb.setHibernateTemplate(getHibernateTemplate());
				Olivicultor ol = oliInfraestructuraEjb.olivicultorAmbId(olivicultorId);
				olivicultor = new OlivicultorCommand();
				if(ol != null){
					olivicultor.fromOlivicultor(ol);										
				}				
			} catch (RemoteException ex) {
				throw new ServletException("Error cridant l'EJB", ex);
			}
		} else {
			olivicultor = new OlivicultorCommand();
		}
		if (isCreate(request)) {
			olivicultor.setAltaDO(new Boolean(true));
			olivicultor.setActiu(new Boolean(true));
		}	
		return olivicultor;
		
	}

	


	/**
	 * Configuración del <i>binder</i>. Si hay campos en el <i>command</i>
	 * con tipos que no sean <i>String</i> se ha de configurar su
	 * correspondiente binder aquí.
	 * @see BaseCommandController#initBinder(javax.servlet.http.HttpServletRequest, org.springframework.web.bind.ServletRequestDataBinder)
	 */
	protected void initBinder(
			HttpServletRequest request,
			ServletRequestDataBinder binder)
	throws Exception {
		binder.registerCustomEditor(
				Long.class,
				new CustomNumberEditor(Long.class, true));
		binder.registerCustomEditor(
				Boolean.class,
				new CustomBooleanEditor("S", "N", true));
		NumberFormat nf = NumberFormat.getNumberInstance();
		binder.registerCustomEditor(Integer.class, null, new CustomNumberEditor(Integer.class, nf, true));
	}


	/**
	 * Indica si la petición es de creación o no.
	 * @param request
	 * @return true si es una petición de creación o false si es de edición.
	 */
	private boolean isCreate(HttpServletRequest request) {
		return (request.getParameter("id") == null || 
			   (request.getParameter("id") != null && request.getParameter("id").equals("")));
	}


	/**
	 * Inyección de la dependencia informacioEjb
	 * @param informacioEjb La clase a inyectar.
	 */
	public void setOliInfraestructuraEjb(OliInfraestructuraEjb oliInfraestructuraEjb) {
		this.oliInfraestructuraEjb = oliInfraestructuraEjb;
	}

	/**
	 * Inyección de la dependencia informacioEjb
	 * @param informacioEjb La clase a inyectar.
	 */
	public void setOliArxiuEjb(OliArxiuEjb oliArxiuEjb) {
		this.oliArxiuEjb = oliArxiuEjb;
	}
	
	 /**
	 * Injecció de la dependència campanyaSessionKey
	 *
	 * @param campanyaSessionKey La classe a injectar.
	 */
	public void setCampanyaSessionKey(String campanyaSessionKey) {
		this.campanyaSessionKey = campanyaSessionKey;
	}
	

	private String missatge(String clave){
		String valor = getMessageSourceAccessor().getMessage(clave);
		return valor;
	}


	/**
	 * set the hibernate template.
	 * @param hibernateTemplate the hibernate spring template.
	 * @spring.property ref="hibernateTemplate"
	 */
	public void setHibernateTemplate(HibernateTemplate hibernateTemplate){
		this.hibernateTemplate = hibernateTemplate;
	}

	
	/**
	 * get the hibernate template.
	 * @return the hibernate spring template.
	 */
	public HibernateTemplate getHibernateTemplate(){
		return this.hibernateTemplate;
	}


	public String getRolOlivicultor() {
		return rolOlivicultor;
	}


	public void setRolOlivicultor(String rolOlivicultor) {
		this.rolOlivicultor = rolOlivicultor;
	}

	public String getRolDoGestor() {
		return rolDoGestor;
	}

	public void setRolDoGestor(String rolDoGestor) {
		this.rolDoGestor = rolDoGestor;
	}

	
}